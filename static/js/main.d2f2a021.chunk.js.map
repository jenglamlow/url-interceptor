{"version":3,"sources":["App.js","serviceWorker.js","index.js"],"names":["ControlPanel","onSearch","whitelistRef","useRef","urlRef","className","ref","style","marginLeft","width","onClick","whitelist","current","value","split","name","cols","rows","Content","url","useState","content","setContent","useEffect","axios","get","then","response","html","data","forEach","item","escapedItem","replace","searchText","RegExp","console","log","replaceText","dangerouslySetInnerHTML","__html","App","setWhitelist","setUrl","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","error","message"],"mappings":"yRAwBA,IAAMA,EAAe,SAAC,GAAkB,IAAhBC,EAAe,EAAfA,SAChBC,EAAeC,iBAAO,MACtBC,EAASD,iBAAO,MAOtB,OACE,6BACE,yBAAKE,UAAU,iBACb,oCACA,2BAAOC,IAAKF,EAAQG,MAAO,CAAEC,WAAY,OAAQC,MAAO,SACxD,4BAAQC,QAVC,WACb,IAAMC,EAAYT,EAAaU,QAAQC,MAAMC,MAAM,MACnDb,EAASG,EAAOQ,QAAQC,MAAOF,IAQFJ,MAAO,CAAEC,WAAY,SAA9C,WAEF,yBAAKH,UAAU,uBACb,0CACA,8BAAUC,IAAKJ,EAAcK,MAAO,CAAEC,WAAY,QAAUO,KAAK,QAAQC,KAAK,KAAKC,KAAK,SAM1FC,EAAU,SAAC,GAAwB,IAAtBC,EAAqB,EAArBA,IAAKR,EAAgB,EAAhBA,UAAgB,EACRS,mBAAS,MADD,mBAC/BC,EAD+B,KACtBC,EADsB,KAuBtC,OAhBAC,qBAAU,WACRC,IAAMC,IAAIN,GAAKO,MACb,SAAAC,GACE,IAAIC,EAAOD,EAASE,KACpBlB,EAAUmB,SAAQ,SAAAC,GAChB,IAAMC,EAAcD,EAAKE,QAAQ,QAAS,UACpCC,EAAa,IAAIC,OAAJ,kCAAsCH,GAAe,KACxEI,QAAQC,IAAIH,GACZ,IAAMI,EAAW,mEAA+DP,GAChFH,EAAOA,EAAKK,QAAQC,EAAYI,MAGlChB,EAAWM,QAGd,CAACT,EAAKR,IACF,yBAAK4B,wBAnBH,CAAEC,OAAQnB,MAsBNoB,EArEf,WAAgB,IAAD,EACqBrB,mBAAS,IAD9B,mBACNT,EADM,KACK+B,EADL,OAEStB,mBAAS,IAFlB,mBAEND,EAFM,KAEDwB,EAFC,KAQb,OACE,6BACE,yBAAKtC,UAAU,WAAU,kBAAC,EAAD,CAAcJ,SANpB,SAACkB,EAAKR,GAC3B+B,EAAa/B,GACbgC,EAAOxB,OAKL,yBAAKd,UAAU,WACb,kBAAC,EAAD,CAASc,IAAKA,EAAKR,UAAWA,OCLlBiC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrB9B,MAAK,SAAA+B,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLxB,QAAQwB,MAAMA,EAAMC,c","file":"static/js/main.d2f2a021.chunk.js","sourcesContent":["import React, { useState, useEffect, useRef } from 'react';\nimport axios from 'axios';\n\nimport './App.css';\n\nfunction App() {\n  const [whitelist, setWhitelist] = useState([])\n  const [url, setUrl] = useState(\"\")\n\n  const handleOnSearch = (url, whitelist) => {\n    setWhitelist(whitelist)\n    setUrl(url)\n  }\n  return (\n    <div>\n      <div className=\"control\"><ControlPanel onSearch={handleOnSearch} /></div>\n      <div className=\"content\">\n        <Content url={url} whitelist={whitelist} />\n      </div>\n    </div>\n\n  );\n}\n\nconst ControlPanel = ({ onSearch }) => {\n  const whitelistRef = useRef(null)\n  const urlRef = useRef(null)\n\n  const search = () => {\n    const whitelist = whitelistRef.current.value.split(\"\\n\")\n    onSearch(urlRef.current.value, whitelist)\n  }\n\n  return (\n    <div>\n      <div className=\"url-container\">\n        <div>URL</div>\n        <input ref={urlRef} style={{ marginLeft: \"10px\", width: \"40%\" }} ></input>\n        <button onClick={search} style={{ marginLeft: \"10px\" }}>Search</button>\n      </div>\n      <div className=\"whitelist-container\">\n        <div>Whitelist</div>\n        <textarea ref={whitelistRef} style={{ marginLeft: \"10px\" }} name=\"Text1\" cols=\"40\" rows=\"5\"></textarea>\n      </div>\n    </div>\n  )\n}\n\nconst Content = ({ url, whitelist }) => {\n  const [content, setContent] = useState(null);\n\n  const createMarkup = () => {\n    return { __html: content }\n  }\n\n  useEffect(() => {\n    axios.get(url).then(\n      response => {\n        let html = response.data\n        whitelist.forEach(item => {\n          const escapedItem = item.replace(/\\/\\//g, \"\\\\/\\\\/\")\n          const searchText = new RegExp(`<div class=\"r\"><a href=\"${escapedItem}`, 'g')\n          console.log(searchText)\n          const replaceText = `<div class=\"r\" style=\"background-color:yellow;\"><a href=\"${item}`\n          html = html.replace(searchText, replaceText)\n        })\n        // console.log(response.data)\n        setContent(html)\n      }\n    )\n  }, [url, whitelist])\n  return <div dangerouslySetInnerHTML={createMarkup()} />\n}\n\nexport default App;\n\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}